{"alert_action_builder": {"modular_alerts": [{"description": "This action allows you to add new notable events to The Watch v2", "largeIcon": "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", "smallIcon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAHZ0lEQVRYhb2Ye1BU1xnALwtYee5aiTZSmyZWq3U6qQgIijUaSzXTJK1pJlNTW6MjOk5MtJjUaGsTdQyiJtYo0SKwBBTwgVjf4iMYBRREFFQUFNkX7Mr7sa+7e3/9Y806m13IYky/mfPHPed83/ndc7/zfd+5Ak9I1Fo9Xd1GAHpEiQ6r/bHsCP1VkCQJo9FERWUNn6fu561Faxgz7nUCB8Xy5VdXALjcbGHIHi3vlbdT3WZFkqQnC3T3noaCI0Us/2ALL7w4n5CnJiMbOA5ZcDS+oTH4K2KRDYyg6EIFAOXNFoQ0NYJSjZCuJu6onuy7PXR6sWsuQDabDb2hhS/PX2H9xgxefm0p4SNm8oPBk5AFRuIbMgF/RaxL8w2dgCwwEr/gKC6WVAJwtcWKsEuFoNQgZD5s6WoG79GyqLiVyhYLNrvnXRNsNjs7dh1g/uK1RMa+SWBYHLKACHxDJuAnj3Eu7Cd/uHhwFLKA8YQMncK0+AX87e+fkHegkKobdYii6Hgxu0Sh1sycomaCsjQIGepHcErHc9xRPbvv9bgDmUwWfAPH4xvq/vay4GhkAZGEDZ9O5KQ5vJ24kYysw1TdqMNqFb352rRb7KTXdhN3TI9/pitY9H+b3IEsFiuKYVMf7kIMA384ibHj/sjceavY+nkexZeuoze0erV4XyJJEpWtVlaUtfF0rg5BqWbycb07kCjaGP38LMeOBEVSduXmd17826RHlAjI0vDS6QfuQJIk8ZsZCQ6ggPEUnr3UL+OXGloRe3HQ3qTbakdIV/Pm+RZ3IICEhR/ip4hFFhTFZzvy+mV82aEqSlVt/dLRG20IqSqWXXbXEwA2/TvbGVPmLfzIa8N2SeK328+TeOxWv4CutFgQUlVsqu70DFR0oQJZQAT+ilgmv/CW1yeo2yLyzNoTjN5cRJfF5jVQQYMRYZeK7Lsejj2A3tBKUFgc/opYQoZOoamp2SvDjZ0mhKUHEFYe52Sduz/0JsnVnfhkqCnUmTwDiaKNafELHjp2BKfPXfbK8Jk7TQhL8xFWnmBO/g0vcSSWFbcSnK3hdof7l3Cmjo83K51+9G7iRreJVtGGaHPNRclnbiFLPIj/6lOEJV+gqcviFdL04waeztVh8XA6nUCV1+/gHxKNvyKW0c/PwmK1OidZrCJvrM2hrFbnorzgi1Lkqw7z7tEahH+e4Ysqg0cAmyTxwPTIxwbv0RJ9xD0ougAZjWYiYmY/zNzjuHrttnPS1oMXEeL/wcLtR12Uo5JOMPyj49Q86Ea+4Stm5tzE5qHU+PRmF+F5OqparXRYJYRUFYtKPEd/l2y/fcdeZEFR+MljWLo8GYCyGhVB8SvweWk1g2ZvQtPiOKqSJDHwnVxithYB8EpuFX5JpdzvcP1sufd6GKBU46NUMyhLw7prHQhpapR13b0DSYDVKlLfoGPIT+PxV8Qy6EdTaO3o5hez16F4eTUrM08j/G4NGw45HL6+uQshIYuEfVcdC98wIHxcwobLjxJmscGMIkvDyAONnNSa+PFeHTKlGr9MNVVtVkS75NKMNskBpNEaCB06mbBRrzJg6FT85DH4hU4g4Jd/wmfi2/znSCkdPWZGLkrh2cWpmCwieeX1CIt2k3LxLgDtZpHw7RWMUTqCZG2nyNDdWobk6rjT4fBHVbcN+W4tglLNoN1aFNkalxaWo3UAdXb1sH5zJhtT8lj/WY4j+8tjCBr2ImlHSp1vvG7fRYRZyey/XMeHBRXIluRy6vYj51xwsh5hYwVntT2M3KslNFtDUZPZOW62SQRmaZhywkBydSdJVe7NYwn7wb+2IQuJxjdkAvmHzjr76w3tyOduY9qafGbvOEdQ4j7UbUbneGFDB75bKhmw8w4+aQ3k1Btd7J5pNCOkq8j9Rr+bD31TWts6eW7sK/jJYxgT8TpG46OIOm9nIcKcFOTvZDFsVYGLniRJ/Ex5CyGlhk895Kn3y9sJyFRjsvVeHfRa5BeeLcUnMBLfkGi2bM9x9pfUNuI3dwc+CRlM33bWTW9lcSNLitwrQYBR+Y389VzfaanPW8fiJevxDY5myDPx3Luvdfb/ev1BhAXprDhU6aZjMIoerz2lBgv+GWpO68w4zvVjAJlMZiLj/oIsOIo/vLHcWQUcKL+HMD+NtOK6vtRd5L3yNsbub/QYOL0GAtDqDIQ/NwOfoCh2puU7+8OX53JF5V2t3WW182yejp23u751rlcXxevVtYSPmEFwWBznLzoC4ZZT1ZhF767LWXd7GLVfR1d/L4p9yaWyap76yXSGj5iJrvEBZqt3BZnVLjHxsJ70Ws+p4rGBAG7duc+Isb/n52NfRW/wriArUBmJO6bv86g/NhA4/nLETZtP5MQ/09ra0edck01i6gkDZc3e1UmPBQRgt0skvr+Z0b96jQa155gDkFLTRVKVe4B84kBfy6kzpUyNT+BCyTW3MVW3yOKSNvp5ZftuQAA9PSaSPskkVVmAKDoc3S5JrLve4bXfPFGgr0VvaKH40nUsFis17VaMtv/TH7TvW/4Hx5i4qAV732gAAAAASUVORK5CYII=", "label": "The Watch v2 : Create notable events", "short_name": "the_watch_v2_create_notable_events", "parameters": [{"format_type": "text", "required": true, "name": "index", "label": "Index", "default_value": "", "help_string": "Indicate a destination index for the notable events. Ensure that destination matches an existing index.", "type": "", "value": ""}], "code": "import json\nimport re\nimport ipaddress\nimport sys\n\n# encoding = utf-8\n\ndef process_event(helper, *args, **kwargs):\n    \"\"\"\n    # IMPORTANT\n    # Do not remove the anchor macro:start and macro:end lines.\n    # These lines are used to generate sample code. If they are\n    # removed, the sample code will not be updated when configurations\n    # are updated.\n\n    [sample_code_macro:start]\n\n    # The following example gets and sets the log level\n    helper.set_log_level(helper.log_level)\n\n    # The following example gets account information\n    user_account = helper.get_user_credential(\"<account_name>\")\n\n    # The following example gets the alert action parameters and prints them to the log\n    index = helper.get_param(\"index\")\n    helper.log_info(\"index={}\".format(index))\n\n\n    # The following example adds two sample events (\"hello\", \"world\")\n    # and writes them to Splunk\n    # NOTE: Call helper.writeevents() only once after all events\n    # have been added\n    helper.addevent(\"hello\", sourcetype=\"sample_sourcetype\")\n    helper.addevent(\"world\", sourcetype=\"sample_sourcetype\")\n    helper.writeevents(index=\"summary\", host=\"localhost\", source=\"localhost\")\n\n    # The following example gets the events that trigger the alert\n    events = helper.get_events()\n    for event in events:\n        helper.log_info(\"event={}\".format(event))\n\n    # helper.settings is a dict that includes environment configuration\n    # Example usage: helper.settings[\"server_uri\"]\n    helper.log_info(\"server_uri={}\".format(helper.settings[\"server_uri\"]))\n    [sample_code_macro:end]\n    \"\"\"\n\n    helper.log_info(\"Alert action the_watch_create_notable_events started.\")\n\n    # Get parameters\n    index = helper.get_param(\"index\")\n    sourcetype = \"stash_thewatchv2_notable_events\"\n    source = \"thewatchv2_create_notable_events\"\n\n   # Process events\n    events = helper.get_events()\n    for event in events:\n        event_processed = {}\n        artifacts = []\n        thewatch_artifact_matched_fields = []\n        thewatch_artifact_matched_keys = []\n        \n        # Find artifact in the event to find them in other fields\n        if (\"thewatch_artifact\" in event):\n            artifacts = remove_duplicates([v[1:len(v)-1] for v in event[\"__mv_thewatch_artifact\"].split(\";\")]) if \"__mv_thewatch_artifact\" in event and event[\"__mv_thewatch_artifact\"]!=\"\" else [event[\"thewatch_artifact\"]]\n            artifacts = [o.replace(\"*\",\".*\") for o in artifacts]\n        \n        helper.log_debug(\"Keys: \"+str(event.keys()))\n        \n        for k in event.keys():\n            helper.log_debug(\"Process key \"+k)\n            if (event[k]!=\"\"):\n                # 1) It's a specific Splunk keyword that need to be keep in the new index as a specific field\n                if (k in [\"index\",\"sourcetype\",\"source\",\"_raw\",\"eventtype\",\"tag::eventtype\",\"tag\",\"_time\",\"_indextime\"]):\n                    helper.log_debug(\"Processed by 1\")\n                    event_processed[\"orig_\"+k.replace(\"_\",\"\")] = event[k]\n                # 2) All thewatch_* fields (except the event_id) that are single value should be processed as a multivalue field with one value (for a better processing in the new index)\n                elif ((k.startswith(\"thewatch_\") and k not in [\"thewatch_alert_id\",\"thewatch_event_id\"]) and \"orig_\"+k not in event_processed):\n                    helper.log_debug(\"Processed by 2\")\n                    event_processed[\"orig_\"+k] = [event[k]]\n                    # We check a specific field in order to determine the type of the artefact\n                    case_id_field = re.search(\"thewatch_artifact_(.*)_case_id\",k)\n                    if (case_id_field and \"orig_thewatch_type\" in event_processed):\n                        event_processed[\"orig_thewatch_type\"] = event_processed[\"orig_thewatch_type\"] + [case_id_field.group(1)]\n                    elif (case_id_field):\n                        event_processed[\"orig_thewatch_type\"] = [case_id_field.group(1)]\n                # 3) All multivalued fields must be processed for the new index with a specific treatment for multivalued thewatch_* fields\n                elif (k.startswith(\"__mv\")):\n                    helper.log_debug(\"Processed by 3\")\n                    if k.startswith(\"__mv_thewatch\") or k.startswith(\"__mv_eventtype\") or k.startswith(\"__mv_tag\"):\n                        prefix = \"orig_\"\n                    else:\n                        prefix = \"\"\n                    # list(dict.fromkeys(...)) is used to remove duplicate fields (ex: two artifacts with the same case id)\n                    event_processed[prefix+k.replace(\"__mv_\",\"\")] = remove_duplicates([v[1:len(v)-1] for v in event[k].split(\";\")])\n                    # We check a specific field in order to determine the type of the artefact\n                    case_id_field = re.search(\"thewatch_artifact_(.*)_case_id\",k)\n                    if (case_id_field and \"orig_thewatch_type\" in event_processed):\n                        event_processed[\"orig_thewatch_type\"] = event_processed[\"orig_thewatch_type\"] + [case_id_field.group(1)]\n                    elif (case_id_field):\n                        event_processed[\"orig_thewatch_type\"] = [case_id_field.group(1)]\n                # 4) Default processing for other fields\n                elif (not k.startswith(\"_\") and k not in event_processed and \"orig_\"+k not in event_processed):\n                    helper.log_debug(\"Processed by 4\")\n                    event_processed[k] = event[k]\n                else:\n                    helper.log_debug(\"Key not processed\")\n        \n        for k in event_processed.keys():\n            # Check if the field is matching one artifact\n            matched_values = is_artifact_in_field(k, event_processed[k], artifacts, helper)\n\n            if (len(matched_values) > 0):\n                thewatch_artifact_matched_fields += [k+\" == \"+v for v in matched_values]\n                thewatch_artifact_matched_keys += [event[\"sourcetype\"]+\" == \"+k]\n\n        # Add search ID\n        event_processed[\"thewatch_sid\"] = helper.settings[\"sid\"]\n        # Add fields that matched artifacts\n        event_processed[\"orig_thewatch_artifact_matched_fields\"] = remove_duplicates(thewatch_artifact_matched_fields)\n        # Add keys that matched artifacts\n        event_processed[\"orig_thewatch_artifact_matched_keys\"] = remove_duplicates(thewatch_artifact_matched_keys)\n        # Add event for indexation to Splunk\n        helper.addevent(json.dumps(event_processed), sourcetype=sourcetype, cam_header=False)\n    \n    # Store events\n    helper.writeevents(index=index, source=source, host=helper.settings[\"server_host\"], fext=\"thewatchv2_notable_events\")\n\n    return 0\n    \n# This function is returning a list of values (from \"values\") that matched one of the artifacts.\n# param: field - The field to process\n# param: values - A list of values for the given field\n# param: artifacts - The list of artifacts of the event\n# Returns an empty list if no value is matching one artifact\ndef is_artifact_in_field(field, values, artifacts, helper):\n    \n    result = []\n    ip_pattern = \"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}$\"\n    ip_network_pattern = \"^(?:[0-9]{1,3}\\.){3}[0-9]{1,3}(?:\\/\\d+)?$\"\n    \n    if (not isinstance(values,list)):\n        values = [values]\n\n    for v in values:\n        \n        # Check if the value is an IP\n        if (re.search(ip_pattern,v)):\n            value = ipaddress.ip_address(v)\n        else:\n            value = v\n       \n        # Check if the value match one of the artifact\n        if (not re.search(\"thewatch|eventtype|tag|orig_raw\",field)):\n            for o in artifacts:\n                # Check if the artifact is an IP/network\n                if (isinstance(value,ipaddress.IPv4Address) and re.search(ip_network_pattern,o)):\n                    artifact = ipaddress.ip_network(o)\n                    if (value in artifact):\n                        result.append(v)\n                else:\n                    artifact = o\n                    if re.search(artifact,v,flags=re.IGNORECASE):\n                        result.append(v)\n          \n    return result\n\n# Remove duplicates from a given list\ndef remove_duplicates(l):\n    return list(dict.fromkeys(l))\n", "uuid": "61121b200f7c4ff9bfa5d01a09ae85c2"}]}, "basic_builder": {"appname": "TA-ak_thewatch_v2", "friendly_name": "The Watch v2", "version": "2.2.1", "author": "Alexandre DEMEYER & B\u00e9ranger QUINTANA", "description": "This add-on is used to optimize your detection according to our logs", "theme": "#009AE1", "large_icon": "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", "small_icon": "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", "visible": false, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 40}, "field_extraction_builder": {"stash_thewatchv2_notable_events": {"data_format": "json"}}, "global_settings_builder": {"global_settings": {"log_settings": {}, "credential_settings": []}}, "sourcetype_builder": {}, "validation": {}}